# meraki
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Meraki
  # UpdateNetworkDeviceModel Model.
  class UpdateNetworkDeviceModel < BaseModel
    # The name of a device
    # @return [String]
    attr_accessor :name

    # The tags of a device
    # @return [String]
    attr_accessor :tags

    # The latitude of a device
    # @return [Float]
    attr_accessor :lat

    # The longitude of a device
    # @return [Float]
    attr_accessor :lng

    # The address of a device
    # @return [String]
    attr_accessor :address

    # The notes for the device. String. Limited to 255 characters.
    # @return [String]
    attr_accessor :notes

    # Whether or not to set the latitude and longitude of a device based on the
    # new address. Only applies when lat and lng are not specified.
    # @return [String]
    attr_accessor :move_map_marker

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['name'] = 'name'
      @_hash['tags'] = 'tags'
      @_hash['lat'] = 'lat'
      @_hash['lng'] = 'lng'
      @_hash['address'] = 'address'
      @_hash['notes'] = 'notes'
      @_hash['move_map_marker'] = 'moveMapMarker'
      @_hash
    end

    def initialize(name = nil,
                   tags = nil,
                   lat = nil,
                   lng = nil,
                   address = nil,
                   notes = nil,
                   move_map_marker = nil,
                   additional_properties = {})
      @name = name
      @tags = tags
      @lat = lat
      @lng = lng
      @address = address
      @notes = notes
      @move_map_marker = move_map_marker

      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      name = hash['name']
      tags = hash['tags']
      lat = hash['lat']
      lng = hash['lng']
      address = hash['address']
      notes = hash['notes']
      move_map_marker = hash['moveMapMarker']

      # Clean out expected properties from Hash.
      names.each_value { |k| hash.delete(k) }

      # Create object from extracted values.
      UpdateNetworkDeviceModel.new(name,
                                   tags,
                                   lat,
                                   lng,
                                   address,
                                   notes,
                                   move_map_marker,
                                   hash)
    end
  end
end
